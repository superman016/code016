{
    "display_id": "sai_6_4",
    "title": "\u8c03\u624b\u8868",
    "description": {
        "format": "html",
        "value": "<p><span style=\"color: rgb(77, 77, 77);\">\u5c0f\u660e\u4e70\u4e86\u5757\u9ad8\u7aef\u5927\u6c14\u4e0a\u6863\u6b21\u7684\u7535\u5b50\u624b\u8868\uff0c\u4ed6\u6b63\u51c6\u5907\u8c03\u65f6\u95f4\u5462\u3002</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u5728\u00a0M78\u00a0\u661f\u4e91\uff0c\u65f6\u95f4\u7684\u8ba1\u91cf\u5355\u4f4d\u548c\u5730\u7403\u4e0a\u4e0d\u540c\uff0cM78\u00a0\u661f\u4e91\u7684\u4e00\u4e2a\u5c0f\u65f6\u6709\u00a0n\u00a0\u5206\u949f\u3002</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u5927\u5bb6\u90fd\u77e5\u9053\uff0c\u624b\u8868\u53ea\u6709\u4e00\u4e2a\u6309\u94ae\u53ef\u4ee5\u628a\u5f53\u524d\u7684\u6570\u52a0\u4e00\u3002\u5728\u8c03\u5206\u949f\u7684\u65f6\u5019\uff0c\u5982\u679c\u5f53\u524d\u663e\u793a\u7684\u6570\u662f\u00a00\u00a0\uff0c\u90a3\u4e48\u6309\u4e00\u4e0b\u6309\u94ae\u5c31\u4f1a\u53d8\u6210\u00a01\uff0c\u518d\u6309\u4e00\u6b21\u53d8\u6210\u00a02\u00a0\u3002\u5982\u679c\u5f53\u524d\u7684\u6570\u662f\u00a0n\u00a0-\u00a01\uff0c\u6309\u4e00\u6b21\u540e\u4f1a\u53d8\u6210\u00a00\u00a0\u3002</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u4f5c\u4e3a\u5f3a\u8feb\u75c7\u60a3\u8005\uff0c\u5c0f\u660e\u4e00\u5b9a\u8981\u628a\u624b\u8868\u7684\u65f6\u95f4\u8c03\u5bf9\u3002\u5982\u679c\u624b\u8868\u4e0a\u7684\u65f6\u95f4\u6bd4\u5f53\u524d\u65f6\u95f4\u591a1\uff0c\u5219\u8981\u6309\u00a0n\u00a0-\u00a01\u00a0\u6b21\u52a0\u4e00\u6309\u94ae\u624d\u80fd\u8c03\u56de\u6b63\u786e\u65f6\u95f4\u3002</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u5c0f\u660e\u60f3\uff0c\u5982\u679c\u624b\u8868\u53ef\u4ee5\u518d\u6dfb\u52a0\u4e00\u4e2a\u6309\u94ae\uff0c\u8868\u793a\u628a\u5f53\u524d\u7684\u6570\u52a0\u00a0k\u00a0\u8be5\u591a\u597d\u554a\u2026\u2026</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u4ed6\u60f3\u77e5\u9053\uff0c\u5982\u679c\u6709\u4e86\u8fd9\u4e2a\u00a0+k\u00a0\u6309\u94ae\uff0c\u6309\u7167\u6700\u4f18\u7b56\u7565\u6309\u952e\uff0c\u4ece\u4efb\u610f\u4e00\u4e2a\u5206\u949f\u6570\u8c03\u5230\u53e6\u5916\u4efb\u610f\u4e00\u4e2a\u5206\u949f\u6570\u6700\u591a\u8981\u6309\u591a\u5c11\u6b21\u3002</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u6ce8\u610f\uff0c\u6309\u00a0+k\u00a0\u6309\u94ae\u65f6\uff0c\u5982\u679c\u52a0k\u540e\u6570\u5b57\u8d85\u8fc7n-1,\u5219\u4f1a\u5bf9n\u53d6\u6a21\u3002</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u6bd4\u5982\uff0cn=10,\u00a0k=6\u00a0\u7684\u65f6\u5019\uff0c\u5047\u8bbe\u5f53\u524d\u65f6\u95f4\u662f0\uff0c\u8fde\u63092\u6b21\u00a0+k\u00a0\u6309\u94ae\uff0c\u5219\u8c03\u4e3a2\u3002</span></p>"
    },
    "tags": [
        "2018\u84dd\u6865\u676f\u56fd\u8d5b"
    ],
    "input_description": {
        "format": "html",
        "value": "<p><span style=\"color: rgb(77, 77, 77);\">\u4e00\u884c\u4e24\u4e2a\u6574\u6570\u00a0n,\u00a0k\u00a0\uff0c\u610f\u4e49\u5982\u9898\u3002</span><br /></p><p><span style=\"color: rgb(77, 77, 77);\">\u5bf9\u4e8e\u00a020%\u00a0\u7684\u6570\u636e\u00a00\u00a0&lt;\u00a0k\u00a0&lt;\u00a0n\u00a0&lt;=\u00a05</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u5bf9\u4e8e\u00a060%\u00a0\u7684\u6570\u636e\u00a00\u00a0&lt;\u00a0k\u00a0&lt;\u00a0n\u00a0&lt;=\u00a0100</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u5bf9\u4e8e\u00a0100%\u00a0\u7684\u6570\u636e\u00a00\u00a0&lt;\u00a0k\u00a0&lt;\u00a0n\u00a0&lt;=\u00a0100000</span></p>"
    },
    "output_description": {
        "format": "html",
        "value": "<p><span style=\"color: rgb(77, 77, 77);\">\u4e00\u884c\u4e00\u4e2a\u6574\u6570</span></p><p><span style=\"color: rgb(77, 77, 77);\">\u8868\u793a\uff1a\u6309\u7167\u6700\u4f18\u7b56\u7565\u6309\u952e\uff0c\u4ece\u4e00\u4e2a\u65f6\u95f4\u8c03\u5230\u53e6\u4e00\u4e2a\u65f6\u95f4\u6700\u591a\u8981\u6309\u591a\u5c11\u6b21\u3002</span></p>"
    },
    "test_case_score": [
        {
            "score": 3,
            "input_name": "1.in",
            "output_name": "1.out"
        },
        {
            "score": 3,
            "input_name": "2.in",
            "output_name": "2.out"
        },
        {
            "score": 3,
            "input_name": "3.in",
            "output_name": "3.out"
        },
        {
            "score": 6,
            "input_name": "4.in",
            "output_name": "4.out"
        },
        {
            "score": 6,
            "input_name": "5.in",
            "output_name": "5.out"
        },
        {
            "score": 6,
            "input_name": "6.in",
            "output_name": "6.out"
        },
        {
            "score": 9,
            "input_name": "7.in",
            "output_name": "7.out"
        },
        {
            "score": 9,
            "input_name": "8.in",
            "output_name": "8.out"
        }
    ],
    "hint": {
        "format": "html",
        "value": "<p><span style=\"color: rgb(77, 77, 77);\">\u5982\u679c\u65f6\u95f4\u6b63\u786e\u5219\u63090\u6b21\u3002\u5426\u5219\u8981\u6309\u7684\u6b21\u6570\u548c\u64cd\u4f5c\u7cfb\u5217\u4e4b\u95f4\u7684\u5173\u7cfb\u5982\u4e0b\uff1a</span></p><p><span style=\"color: rgb(77, 77, 77);\">1\uff1a+1</span></p><p><span style=\"color: rgb(77, 77, 77);\">2\uff1a+1,\u00a0+1</span></p><p><span style=\"color: rgb(77, 77, 77);\">3\uff1a+3</span></p><p><span style=\"color: rgb(77, 77, 77);\">4\uff1a+3,\u00a0+1</span></p>"
    },
    "time_limit": 1000,
    "memory_limit": 256,
    "samples": [
        {
            "input": "5 3\n",
            "output": "2\n"
        }
    ],
    "template": {},
    "spj": null,
    "rule_type": "OI",
    "source": "2018\u5e74\u7b2c\u4e5d\u5c4a\u84dd\u6865\u676fc/c++B\u7ec4\u56fd\u8d5b\u51b3\u8d5b\u771f\u9898\u9898\u76ee",
    "answers": [
        {
            "language": "C++",
            "code": "#include<bits/stdc++.h>\nusing namespace std;\nqueue<int> que;\nint step[100005];\nbool vis[100005];\nint main(){\n\tint n, k;\n\tcin>>n>>k;\n\tfor(int i = 0; i < n; i++){\n\t\tstep[i] = 0;\n\t\tvis[i] = false;\n\t}\n\tque.push(0);\n\tstep[0] = 0;\n\tvis[0] = true;\n\twhile(!que.empty()){\n\t\tint now = que.front();\n\t\tque.pop();\n\t\tint one_step = (now + 1) % n;\n\t\tif(vis[one_step] == false){\n\t\t\tvis[one_step] = true;\n\t\t\tstep[one_step] = step[now] + 1;\n\t\t\tque.push(one_step);\n\t\t}\n\t\tint k_step = (now + k) % n;\n\t\tif(vis[k_step] == false){\n\t\t\tvis[k_step] = true;\n\t\t\tstep[k_step] = step[now] + 1;\n\t\t\tque.push(k_step);\n\t\t}\n\t}\n\tint max_step = step[0];\n\tfor(int i = 0; i < n; i++)\n\t\tmax_step = max(max_step, step[i]);\n\tcout<<max_step<<endl;\n\treturn 0;\n}"
        }
    ]
}